#include "mlir/TableGen/AttrOrTypeDef.h"
#include "llvm/ADT/StringExtras.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/raw_ostream.h"
#include "mlir/TableGen/AttrOrTypeDef.h"
#include "mlir/TableGen/GenInfo.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/FormatVariadic.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/TableGen/Record.h"

using llvm::formatv;
using llvm::Record;
using llvm::RecordKeeper;
using namespace mlir;
using mlir::tblgen::AttrDef;

static void emitEnumProtoSerializer(const Record &enumDef, raw_ostream &os,
                                    bool emitDecl) {

}

static bool emitAttrProtoDeserializerDecls(const RecordKeeper &records,
                                           raw_ostream &os) {


  return false;
}

static bool emitAttrProtoDeserializerDefs(const RecordKeeper &records,
                                          raw_ostream &os) {
  os << "/* Autogenerated by mlir-tblgen; don't manually edit. */\n";
  // os << deserializerDefFileHeader;
  // auto defs = records.getAllDerivedDefinitionsIfDefined("CIR_Attr");

  // for (const Record *def : defs) {
  //   AttrDef attr(def);
  //   os << attr.getName() << "\n";
  // }

  auto mlirDefs = records.getAllDerivedDefinitionsIfDefined("Builtin_Attr");

  for (const Record *def : mlirDefs) {
    AttrDef attr(def);
    os << attr.getName() << "\n";
  }
  
//   for (const Record *def : defs)
//    emitEnumProtoSerializer(*def, os, /*emitDecl=*/false);
  // os << deserializerDefEnd;

  return false;
}

static mlir::GenRegistration
  genEnumDeserializerProtoDecls("gen-attr-deser-proto-decls",
                                "Generate attr Proto deserializer declarations",
                                &emitAttrProtoDeserializerDecls);

static mlir::GenRegistration
  genEnumDeserializerProtoDefs("gen-attr-deser-proto-defs",
                               "Generate attr Proto deserializer definitions",
                               &emitAttrProtoDeserializerDefs);
