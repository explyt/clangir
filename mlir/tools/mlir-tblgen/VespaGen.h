// -*- C++ -*-
#ifndef MLIR_TOOLS_MLIRTBLGEN_VESPAGEN_H_
#define MLIR_TOOLS_MLIRTBLGEN_VESPAGEN_H_

#include "mlir/TableGen/AttrOrTypeDef.h"
#include "llvm/ADT/ArrayRef.h"
#include "llvm/ADT/StringExtras.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/FormatVariadic.h"
#include "llvm/Support/raw_ostream.h"

#include "VespaCommon.h"
#include "mlir/TableGen/Operator.h"

#include <cassert>

namespace vespa {

const CppTypeInfo mlirNaming = {"mlir", "MLIR"};
const CppTypeInfo cirNaming = {"cir", "CIR"};

enum class ValueType {
  REG,
  OPT,
  VAR,
  VAROFVAR,
};

struct ParamData {
  llvm::StringRef cppType;
  std::string name;
  std::string deserName;
  ValueType serType;
};

inline constexpr const char *autogenMessage =
    "/* Autogenerated by mlir-tblgen; don't manually edit. */\n";

inline constexpr const char *clangOff = "// clang-format off\n";
inline constexpr const char *clangOn = "// clang-format on\n";

inline constexpr const char *protoHeader = R"(
syntax = "proto3";
package protocir;
option java_package = "org.jacodb.impl.grpc";
)";


inline constexpr const char *jacoDBLicense = R"(/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
)";

std::string makeIdentifier(llvm::StringRef str);

std::string makeProtoSymbol(llvm::StringRef symbol);

std::string makeFullProtoSymbol(llvm::StringRef enumName,
                                llvm::StringRef protoSymbol);

llvm::StringRef getProtoType(mlir::tblgen::AttrOrTypeParameter &p);

llvm::StringRef removeGlobalScopeQualifier(llvm::StringRef type);

void serializeParameter(mlir::tblgen::AttrOrTypeParameter &p,
                        llvm::StringRef varName,
                        llvm::raw_ostream &os);

std::string serializeParameters(llvm::StringRef ty,
                                llvm::ArrayRef<mlir::tblgen::AttrOrTypeParameter> ps,
                                llvm::StringRef varName);

void deserializeParameter(const ParamData &p,
                          llvm::StringRef varName,
                          llvm::raw_ostream &os);

std::string deserializeParameters(llvm::StringRef ty,
                                  llvm::StringRef cppTy,
                                  llvm::ArrayRef<ParamData> ps,
                                  llvm::StringRef varName,
                                  const char *builder,
                                  bool doesNeedCtx = false);

void checkType(llvm::StringRef typ, llvm::raw_ostream &os);

llvm::StringRef getKotlinType(mlir::tblgen::AttrOrTypeParameter &p);

void buildParameter(mlir::tblgen::AttrOrTypeParameter &p,
                    llvm::StringRef varName,
                    llvm::raw_ostream &os,
                    size_t padding = 8);

void generateCodeFile(llvm::ArrayRef<CppSwitchSource*> sources,
                      bool disableClang,
                      bool addLicense,
                      bool emitDecl,
                      llvm::raw_ostream &os);

void generateCodeFile(CppSwitchSource &source,
                      bool disableClang,
                      bool addLicense,
                      bool emitDecl,
                      llvm::raw_ostream &os);

} // namespace vespa

#endif // MLIR_TOOLS_MLIRTBLGEN_VESPAGEN_H_
